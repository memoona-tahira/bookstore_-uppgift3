{
	"info": {
		"_postman_id": "90459d5b-05af-448a-9fe2-3ad90edcc556",
		"name": "Create 5 writers Reva",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create_5_Writers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d54c6b3-c40c-4edc-b9db-f48c47c3fa92",
						"exec": [
							"// Setting mockdata and counter as environement variables\r",
							"// Note: Environement variables can only be strings!\r",
							"if (!pm.environment.has('mockData')) {\r",
							"    let mockData = [\r",
							"      {\r",
							"        'name': 'Erik Nellson',\r",
							"        'description': 'Absintinbiten glädjespridare.'\r",
							"      },\r",
							"      {\r",
							"        \"name\": \"Thomas sundbegr\",\r",
							"        \"description\": \"Känd barnboksförfattare från Sverige.\"\r",
							"      },\r",
							"      {\r",
							"        \"name\": \"Emmila Åsa\",\r",
							"        \"description\": \"Samhällskritisk skrönikör.\"\r",
							"      },\r",
							"      {\r",
							"        \"name\": \"Jemmy Jonasson\",\r",
							"        \"description\": \"Världens bästa writers.\"\r",
							"      },\r",
							"      {\r",
							"       \"name\": \"Babilon Lindgren\",\r",
							"       \"description\": \"Känd barnboksförfattare från Danemark.\"\r",
							"      }\r",
							"    ];\r",
							"    pm.environment.set('counter', 0);\r",
							"    pm.environment.set('mockData', JSON.stringify(mockData));\r",
							" }\r",
							"\r",
							" // Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get('counter') / 1;\r",
							" console.log(counter);\r",
							" let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							" let {name, description} = mockData[counter];\r",
							"\r",
							" // Save to environment variables to use in the request\r",
							" pm.environment.set('name', name);\r",
							" pm.environment.set('description', description);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "961cacb1-3038-4753-9e49-71a931da75db",
						"exec": [
							"// The response\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"\r",
							"// Add the inserted id to the mockData and save to environment\r",
							"mockData[counter].id = response.lastID;\r",
							"pm.environment.set('mockData', JSON.stringify(mockData));\r",
							"\r",
							"// Test number of changed rows\r",
							"pm.test('one row should be changed', function(){\r",
							"    pm.expect(response.changes).to.equal(1);\r",
							"});\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest('Create_5_Writers');\r",
							"}\r",
							"// Otherwise reset the counter\r",
							"// (for the next request that will reuse the mockdata)\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"description\": \"{{description}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/writers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"writers"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}